Тестове завдання на позицію Python Developer 
API для управління workflow

Необхідно розробити API для управління workflow, використовуючи концепцію графів. Система повинна дозволяти створювати 4 типи вузлів (nodes). Та має включати розробку API з використанням FastAPI та Pydantic для обробки веб-запитів, інтеграцію з бібліотекою networkX для управління графами, реалізацію алгоритму для визначення шляху від початкового до кінцевого вузла.

* Ми не проти якщо ви будете використовувати Django або Flask замість FastAPI, більша перевага буде надана кандидатам які використовували FastAPI, але все залежить від якості виконаного завдання. Якщо ви обрали Django ми радимо використовувати https://django-ninja.dev/.

Опис типів вузлів:
Start Node:
Може мати лише одне вихідне ребро (edge).
Не може мати вхідних ребер.
Message Node:
Може мати статуси: pending, sent, opened.
Має мати текст повідомлення.
Може мати тільки одне вихідне ребро.
Може мати декілька вхідних ребер.
Condition Node:
Може мати два вихідних ребра: Yes та No. Якщо умова (condition) є істинною (True), вибирається шлях через Yes ребро, якщо хибною (False) – через No ребро.
Може мати декілька вхідних ребер. Може бути з'єднана з Message Node або іншою Condition Node, але умова повинна обраховуватися лише на основі статусу останньої виконаної Message Node. 
End Node:
Це кінцевий вузол для workflow.
Може мати декілька вхідних ребер.
Не може мати вихідних ребер.





Вимоги до API:
Створення,Оновлення,Видалення Workflow.
Створення Nodes: Endpoint для додавання нових вузлів (Start, Message, Condition, End) до workflow.
Конфігурація вузлів: Можливість змінювати параметри для вузлів або видаляти вузли. 
Запуск Workflow: Endpoint для ініціалізації та запуску обраного Workflow, з поверненням детального шляху від Start до End Node. Або помилкою що не можна дійти від start до end вузла з описом причини.

* Зверніть уагу на проектування вашого рішення, воно повинно бути максимально гнучким для розширення. Наприклад додавання нових типів вузлів з іньшими властивостями і т.д.
Технології:
networkX: для побудови графів.
pytest: для написання тестових прикладів і тестування алгоритму та API.
FastAPI: для побудови API.
Pydentic: Для валідації даних.
sqlalchemy або tortoiseorm для роботи з базою даних.
Nice to use https://zerosteiner.github.io/rule-engine/ для обчислення conditions в Condition Nodes але не обов'язково.
На що ми звертаємо увагу під час перевірки вашого завдання:
Код - він повинен бути чистим, добре структурованим та коментованим, написаним за правилами PEP8. Всі коментарі повинні бути написанні тільки англійською мовою. Іменування модулів, класів, функцій, змінних повинно бути зрозумілим не тільки вам, але й іншим тож ми радимо використовувати повні імена в назвах і не використовувати скорочень.
Тести - наявність тестів що покривають основні сценарії використання розробленої системи.
Дотримання принципів SOLID, DRY, KISS при розробці цього тестового завдання та в цілому.
Використання патернів проєктування там де це доцільно.

* Якщо ви ніколи не працювали з FastAPI радимо ознайомитись з концептами та патернами які бажано використовувати при розробці API з використанням FastAPI - https://mpuig.github.io/Notes/fastapi_basics/ 


Який ми очікуємо результат щоб оцінити ваші знання:
Посилання на github/gitlab з вихідним кодом проекту, тестовими сценаріями, readme з інструкції з запуску проекту та тестів.
Додатковий бонус якщо ви знімете коротке відео англійською з презентацією роботи вашої системи і поясненням вашого підходу до реалізації. Навіщо нам потрібно це відео? Щоб ми швидше могли зрозуміти як ви можете пояснювати свої думки і рішення, тому що комунікація дуже важлива при роботі в команді.

* Для запису відео ви можете використовувати loom.com або бескоштовну альтернативу screenity
Візуальний приклад workflow для кращого сприйняття.
* Червоним виділено шлях від start node до end node.
